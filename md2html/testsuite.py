#!/usr/bin/env python3
"""
Shared test utilities for md2html
Provides generic helpers and output control for test suites
Generated by claude opus 4.1
"""

import os
import subprocess
import sys
from dataclasses import dataclass
from pathlib import Path
from typing import List, Tuple

# Colors for terminal output
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    RESET = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'

@dataclass
class TestContext:
    """Context for test execution with output control"""
    quiet: bool = False      # Only show failures
    veryquiet: bool = False  # Only show final count
    verbose: bool = False    # Show extra detail
    keep_files: bool = False # Keep test files after completion

    # Track test results
    passed: int = 0
    failed: int = 0
    current_test: int = 0

    def print(self, msg: str, level: str = 'normal'):
        """Print based on verbosity settings"""
        if self.veryquiet:
            return

        if level == 'error':
            # Always print errors unless veryquiet
            print(msg)
        elif level == 'fail':
            # Print failures unless veryquiet
            print(msg)
        elif level == 'verbose' and self.verbose:
            # Only print if verbose
            print(msg)
        elif level == 'normal' and not self.quiet:
            # Print normal messages unless quiet
            print(msg)

    def test_start(self, name: str):
        """Start a new test"""
        self.current_test += 1
        self.print(f"\n{Colors.BOLD}Test {self.current_test}: {name}{Colors.RESET}")
        return self.current_test

    def detail(self, msg: str):
        """Print test detail (verbose)"""
        self.print(f"  {Colors.DIM}{msg}{Colors.RESET}", level='verbose')

    def pass_test(self, msg: str = "Passed"):
        """Mark test as passed"""
        self.passed += 1
        self.print(f"  {Colors.GREEN}✓ {msg}{Colors.RESET}")
        return True

    def fail_test(self, msg: str):
        """Mark test as failed"""
        self.failed += 1
        self.print(f"  {Colors.RED}✗ {msg}{Colors.RESET}", level='fail')
        return False

    def print_header(self, msg: str):
        """Print section header"""
        self.print(f"\n{Colors.BOLD}{Colors.BLUE}=== {msg} ==={Colors.RESET}")

    def print_summary(self, passed: int, failed: int, suite_name: str = ""):
        """Print test summary (always shows unless veryquiet)"""
        if self.veryquiet:
            return

        total = passed + failed
        if failed == 0:
            msg = f"✓ All {total} tests passed"
            if suite_name:
                msg += f" ({suite_name})"
            print(f"{Colors.GREEN}{Colors.BOLD}{msg}{Colors.RESET}")
        else:
            percentage = (passed / total * 100) if total > 0 else 0
            msg = f"⚠ {failed}/{total} tests failed ({percentage:.1f}% pass rate)"
            if suite_name:
                msg += f" ({suite_name})"
            print(f"{Colors.YELLOW}{Colors.BOLD}{msg}{Colors.RESET}")

def run_command(args: List[str], cwd: Path = None) -> Tuple[bool, str, str]:
    """
    Run md2html with given arguments.
    Returns (success, stdout, stderr)
    """
    cmd = [sys.executable, '-m', 'md2html.md2html'] + args

    # Get the project root (parent of md2html package)
    project_root = Path(__file__).parent.parent

    # Set up environment with proper PYTHONPATH
    env = os.environ.copy()
    if 'PYTHONPATH' in env:
        env['PYTHONPATH'] = str(project_root) + os.pathsep + env['PYTHONPATH']
    else:
        env['PYTHONPATH'] = str(project_root)

    try:
        result = subprocess.run(cmd, capture_output=True, text=True, cwd=cwd, env=env)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)
